<?php
/**
* @file
* This module shows the sets and photo's from a Flickr account
*/

/**
* Implementation of hook_help()
*/
function flickrgallery_help($path, $arg) {
  if ($path == 'admin/help#flickrgallery') {
    return '<p>' . t('This module shows the sets and photo\'s from a Flickr account.') . '</p>';
  }
}

/**
* Implementation of hook_permission()
*/
function flickrgallery_permission() {
  return array(
    'view photosets' => array(
      'title' => t('View photosets'), 
      'description' => t('View the sets and images from the Flickr Gallery'),
    ),
    'administer flickr settings' => array(
      'title' => t('Administer Flickr settings'), 
      'description' => t('Administer the settings for the Flickr Gallery'),
    ),
  );
}

/**
* Implementation of hook_menu()
*/
function flickrgallery_menu() {
  $items = array();
  
  $items['admin/config/media/flickr'] = array(
    'title' => 'Flickr settings',
    'description' => 'Configure options for the flickr Gallery module',
    'page callback' => 'flickrgallery_admin_settings',
    'access arguments' => array('administer flickr settings'),
    'file' => 'flickrgallery.admin.inc',
  );
  
  $items['flickr'] = array(
    'title' => 'Flickr Gallery',
    'page callback' => 'flickrgallery_wrapper_albums',
    'access arguments' => array('view photosets'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -100,
  );
  
  $items['flickr/set/%'] = array(
    'title' => 'Flickr Gallery Set',
    'page callback' => 'flickrgallery_set',
    'access arguments' => array('view photosets'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

function flickrgallery_admin_settings() {
  return drupal_get_form('flickrgallery_settings_form');
}

/**
* Implementation of hook_theme()
*/
function flickrgallery_theme($existing, $type, $theme, $path) {
  return array(
    'flickrgallery_wrapper_albums' => array(),
    'flickrgallery_albums' => array(
      'variables' => array('description' => NULL, 'albums' => NULL),
      'template'  => 'flickrgallery_albums',
    ),
    'flickrgallery_set' => array('arguments' => 'set'),
    'flickrgallery_photoset' => array(
      'variables' => array('photoset' => NULL, 'meta' => NULL),
      'template'  => 'flickrgallery_photoset',
    ),
    'flickrgallery_photo' => array(
      'variables' => array('image' => NULL, 'image_meta' => NULL),
      'template'  => 'flickrgallery_photo', 
    ),
  );
}

function flickrgallery_wrapper_albums() {
  return theme('flickrgallery_wrapper_albums', array());
}

function flickrgallery_set() {
  return theme('flickrgallery_set', array('set_id' => arg(2)));
}

/**
 * Helper function for checking required phpFlickr.php file
 */
function _flickrgallery_check_file() {
  $library_path = libraries_get_path('phpFlickr');
  if (file_exists($library_path . '/phpFlickr.php')) {
    return TRUE;
  } 
  else {
    if (user_access('administer flickr settings')) {
      drupal_set_message(t('You need to download and place phpFlickr.php inside sites/all/libraries/phpFlickr:') . ' ' . l(t('http://code.google.com/p/phpflickr/'), 'http://code.google.com/p/phpflickr/'), 'error');
    }
    return FALSE;
  }
}

function theme_flickrgallery_wrapper_albums() {

  // Check if phpFlickr file is downloaded
  if (_flickrgallery_check_file()) {
    // Require phpFlickr.php
    require_once libraries_get_path('phpFlickr') . "/phpFlickr.php";
    
    // Add CSS file
    drupal_add_css(drupal_get_path('module', 'flickrgallery') . '/flickrgallery.css');
    
    // Set custom title
    drupal_set_title(variable_get('flickrgallery_title', 'Flickr Gallery'));
    
    // Create Flickr object
    $f = new phpFlickr(variable_get('flickrgallery_apikey', NULL), variable_get('flickrgallery_secretkey', NULL));
    
    // Check if caching option is enabled, and if true cache the api call
    if (variable_get('flickrgallery_caching') == TRUE) {
      // Get the path to the cache dir
      $path = drupal_realpath(variable_get('flickrgallery_cach_dir', NULL));
      
      // Check if the dir exists and is writable
      if (isset($path) && file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
        $f->enableCache('fs', drupal_realpath(variable_get('flickrgallery_cach_dir')));
      }
      else {
        // Dir doesn't exist or isn't writable, put message in watchdog
        watchdog('flickrgallery', 'The cache directory for Flickr Gallery could not be created or is not accessible.', array(), WATCHDOG_ERROR);
      }
    }
    
    $token = variable_get('flickrgallery_token', NULL);
    $private = variable_get('flickrgallery_private_pictures', NULL);
    
    // Token for private picture
    // Check if token is not empty and show private has been set to 'yes'
    if (!empty($token) && $private == 1) {
      $f->setToken(variable_get('flickrgallery_token', NULL));
    }
    
    // Get Flickr User info and User ID
    $flickr_user = array();
    $flickr_user = $f->people_getInfo(variable_get('flickrgallery_userID', NULL));
    $flickr_uid = $flickr_user['id'];
    
    // Get Flickr sets
    $sets = $f->photosets_getList ($flickr_uid);
    

    $description = variable_get('flickrgallery_description', NULL);
    $albums = array();
 
    // Check if $sets isn't empty
    if (!empty($sets)) {
      foreach ($sets['photoset'] as $set) {
        $thumb_url = "http://farm" . $set['farm'] . ".static.flickr.com/" . $set['server'] . "/" . $set['primary'] . "_" . $set['secret'] . "_" . variable_get('flickrgallery_albums', 's') . ".jpg";
        $variables = array(
          'path' => $thumb_url, 
          'alt' => $set['title'],
          'title' => $set['title'],
          'attributes' => array('class' => 'flickrgallery-set-image'),
        );
        $img = theme('image', $variables);
        $image = array();
        $image['info'] = $set;
        $image['total'] = $set['photos'];
        $image['image_link'] = l($img, "flickr/set/" . $set['id'], array('attributes' => array('class' => 'flickrgallery', 'title' => $set['title']), 'html' => 'true'));
        $image['title_link'] =  l($set['title'], "flickr/set/" . $set['id'], array('attributes' => array('class' => 'flickrgallery-title', 'title' => $set['title']), 'html' => 'true'));
    
        $albums[] = $image;
      }
      return theme('flickrgallery_albums', array('description' => $description, 'albums' => $albums));
    }
    else {
      // If no sets, display msg
      return "<h2>" . t("No pictures available") . "</h2>";
    }
  }
}

function theme_flickrgallery_set($set_id = NULL) {
  // Check if phpFlickr file is downloaded
  if (_flickrgallery_check_file()) {
    // Require phpFlickr.php
    require_once libraries_get_path('phpFlickr') . "/phpFlickr.php";
  
    // Add CSS file
    drupal_add_css(drupal_get_path('module', 'flickrgallery') . '/flickrgallery.css');
    
    // Create Flickr object
    $f = new phpFlickr(variable_get('flickrgallery_apikey', NULL), variable_get('flickrgallery_secretkey', NULL));
    
    // Check if caching option is enabled, and if true cache the api call
    if (variable_get('flickrgallery_caching') == TRUE) {
      // Get the path to the cache dir
      $path = drupal_realpath(variable_get('flickrgallery_cach_dir', NULL));
      
      // Check if the dir exists and is writable
      if (isset($path) && file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
        $f->enableCache('fs', drupal_realpath(variable_get('flickrgallery_cach_dir')));
      }
      else {
        // Dir doesn't exist or isn't writable, put message in watchdog
        watchdog('flickrgallery', 'The cache directory for Flickr Gallery could not be created or is not accessible.', array(), WATCHDOG_ERROR);
      }
    }
    
    $token = variable_get('flickrgallery_token', NULL);
    $private = variable_get('flickrgallery_private_pictures', NULL);
    
    // Token for private picture
    // Check if token is not empty and show private has been set to 'yes'
    if (!empty($token) && $private == 1) {
      $f->setToken(variable_get('flickrgallery_token', NULL));
    }
    
    // Get Flickr set title
    $set = $set_id['set_id'];
    $set_info = ($f->photosets_getInfo($set));

    // Set Flickr set title as page title
    drupal_set_title($set_info['title'], 'Flickr Set');
    
    // Get Flickr photos for this set
    $photos = $f->photosets_getPhotos($set);
    
    // Get META data for this set
    $meta = $f->photosets_getInfo($set);
    
    // If there aren't any photo's, display message
    if (empty($set) || empty($photos)) {
      drupal_set_message(t('This set doesn\'t exists or there aren\'t any pictures available for this set.'), 'error');
      drupal_not_found();
      exit();
    }
    
    // Get the type for Lightbox
    $type = variable_get('flickrgallery_lightbox_type', NULL);
    
    // Declare variables
    $photoset = array();
    $image_meta = array();
    
    foreach ($photos['photoset']['photo'] as $photo ) {
      $variables = array(
        'path' => $f->buildPhotoURL($photo, variable_get('flickrgallery_thumb', 'square')), 
        'alt' => $photo['title'],
        'title' => $photo['title'],
        'attributes' => array('class' => 'flickrgallery-set-image'),
      );
      $img = theme('image', $variables);
      $image = array();
      
      // Get META data for this image, only if flickrgallery_override is set to TRUE in the admin screen
      // This will lead to slower performance
      if (variable_get('flickrgallery_override') == TRUE) {
        $image_meta = $f->photos_getInfo($photo['id']);
      }
       
      $image['info'] = $photo;
      $image['image'] = l($img, $f->buildPhotoURL ($photo, variable_get('flickrgallery_large', 'large')), array('attributes' => array('class' => 'flickrgallery-image ' . $type, 'rel' => $type . "[flickrgallery]", 'title' => $photo['title']), 'html' => 'true'));
      $photoset[] = theme('flickrgallery_photo', array('image' => $image, 'image_meta' => $image_meta));
    }
    
    // Start the output
    return theme('flickrgallery_photoset', array('photoset' => $photoset, 'meta' => $meta));  
  }
  else {
    return '';
  }
}

/**
 * Ensure the Flickr Gallery cache is flushed whenever hook_flush_caches is invoked.
 */
function flickrgallery_flush_caches() {
  // Do not actually flush caches if running on cron. Drupal uses this hook
  // in an inconsistent fashion and it does not necessarily mean to *flush*
  // caches when running from cron. Instead it's just getting a list of cache
  // tables and may not do any flushing.
  if (!empty($GLOBALS['locks']['cron'])) {
    return;
  }

  flickrgallery_dir_flush_caches();
}

/*
 * Function to clean up all the cached files.
 */
function flickrgallery_dir_flush_caches() {
  file_unmanaged_delete_recursive(variable_get('flickrgallery_cach_dir', NULL));
}